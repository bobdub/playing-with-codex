#!/usr/bin/env bash
set -euo pipefail

GATEWAY_PREFIX="${GATEWAY_PREFIX:-/api/qwen}"
SERVICE_URL="${SERVICE_URL:-http://127.0.0.1:8080}"
SERVER_NAME="${SERVER_NAME:-_}"
LISTEN_PORT="${LISTEN_PORT:-80}"
NGINX_CONF_DIR="${NGINX_CONF_DIR:-/etc/nginx/conf.d}"
OUTPUT_FILE="${OUTPUT_FILE:-$NGINX_CONF_DIR/qwen-gateway.conf}"
SKIP_NGINX_RELOAD="${SKIP_NGINX_RELOAD:-0}"
AUTH_HTPASSWD_FILE="${AUTH_HTPASSWD_FILE:-}"
AUTH_BASIC_REALM="${AUTH_BASIC_REALM:-Qwen Gateway}"
ENABLE_RATE_LIMIT="${ENABLE_RATE_LIMIT:-1}"
RATE_LIMIT_ZONE="${RATE_LIMIT_ZONE:-qwen_gateway_clients}"
RATE_LIMIT_MEMORY="${RATE_LIMIT_MEMORY:-10m}"
RATE_LIMIT="${RATE_LIMIT:-60r/m}"
RATE_LIMIT_BURST="${RATE_LIMIT_BURST:-30}"
RATE_LIMIT_NOBURST="${RATE_LIMIT_NOBURST:-0}"

log() {
  echo "[qwen-gateway] $*"
}

fail() {
  log "Error: $*"
  exit 1
}

require_command() {
  if ! command -v "$1" >/dev/null 2>&1; then
    fail "Missing required command: $1"
  fi
}

normalise_prefix() {
  local value="$1"
  if [[ -z "$value" ]]; then
    echo "/api/qwen"
    return
  fi
  if [[ "$value" != /* ]]; then
    value="/$value"
  fi
  value="${value%/}"
  if [[ -z "$value" ]]; then
    echo "/api/qwen"
  else
    echo "$value"
  fi
}

normalise_service_url() {
  local value="$1"
  if [[ -z "$value" ]]; then
    echo "http://127.0.0.1:8080"
    return
  fi
  value="${value%%/}"
  echo "$value"
}

if [[ $EUID -ne 0 ]]; then
  fail "This configurator must be run as root so it can write to nginx directories."
fi

require_command nginx

SERVICE_URL="$(normalise_service_url "$SERVICE_URL")"
GATEWAY_PREFIX="$(normalise_prefix "$GATEWAY_PREFIX")"
PREFIX_WITH_SLASH="${GATEWAY_PREFIX%/}/"
PROXY_PASS_TARGET="$SERVICE_URL/"

AUTH_DIRECTIVES=""
if [[ -n "$AUTH_HTPASSWD_FILE" ]]; then
  if [[ ! -f "$AUTH_HTPASSWD_FILE" ]]; then
    fail "AUTH_HTPASSWD_FILE is set to $AUTH_HTPASSWD_FILE but the file does not exist"
  fi
  AUTH_DIRECTIVES="$(printf '        auth_basic "%s";\n        auth_basic_user_file "%s";\n' "$AUTH_BASIC_REALM" "$AUTH_HTPASSWD_FILE")"
  log "Enabling basic authentication using credentials file $AUTH_HTPASSWD_FILE"
else
  log "Basic authentication disabled; provide AUTH_HTPASSWD_FILE to enable"
fi

RATE_LIMIT_ZONE_DIRECTIVE=""
RATE_LIMIT_LOCATION_DIRECTIVE=""
if [[ "$ENABLE_RATE_LIMIT" == "1" ]]; then
  RATE_LIMIT_ZONE_DIRECTIVE="limit_req_zone \\$binary_remote_addr zone=${RATE_LIMIT_ZONE}:${RATE_LIMIT_MEMORY} rate=${RATE_LIMIT};"
  RATE_LIMIT_LOCATION_DIRECTIVE="        limit_req zone=${RATE_LIMIT_ZONE} burst=${RATE_LIMIT_BURST}"
  if [[ "$RATE_LIMIT_NOBURST" == "1" ]]; then
    RATE_LIMIT_LOCATION_DIRECTIVE+=" nodelay"
  fi
  RATE_LIMIT_LOCATION_DIRECTIVE+=";"
  log "Rate limiting enabled (${RATE_LIMIT} with burst ${RATE_LIMIT_BURST})"
else
  log "Rate limiting disabled via ENABLE_RATE_LIMIT=$ENABLE_RATE_LIMIT"
fi

log "Ensuring nginx configuration directory exists at $NGINX_CONF_DIR"
mkdir -p "$NGINX_CONF_DIR"

log "Writing gateway configuration to $OUTPUT_FILE"
{
  printf '# Autogenerated by configure_qwen_gateway.sh – routes %s to %s\n' "$GATEWAY_PREFIX" "$SERVICE_URL"
  if [[ -n "$RATE_LIMIT_ZONE_DIRECTIVE" ]]; then
    printf '%s\n' "$RATE_LIMIT_ZONE_DIRECTIVE"
  fi
  cat <<CONF
server {
    listen ${LISTEN_PORT};
    listen [::]:${LISTEN_PORT};
    server_name ${SERVER_NAME};

    location = ${GATEWAY_PREFIX} {
        return 301 ${PREFIX_WITH_SLASH};
    }

    location ${PREFIX_WITH_SLASH} {
CONF
  if [[ -n "$AUTH_DIRECTIVES" ]]; then
    printf '%s' "$AUTH_DIRECTIVES"
  fi
  if [[ -n "$RATE_LIMIT_LOCATION_DIRECTIVE" ]]; then
    printf '%s\n' "$RATE_LIMIT_LOCATION_DIRECTIVE"
  fi
  cat <<CONF
        proxy_pass ${PROXY_PASS_TARGET};
        proxy_http_version 1.1;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header X-Forwarded-Host \$host;
        proxy_set_header X-Forwarded-Prefix ${GATEWAY_PREFIX};
        proxy_set_header X-Forwarded-Uri \$request_uri;
        proxy_redirect off;
        proxy_read_timeout 900;
        client_max_body_size 32m;
        add_header Cache-Control "no-store";
    }
}
CONF
} > "$OUTPUT_FILE"

chmod 640 "$OUTPUT_FILE"

log "Validating nginx configuration"
nginx -t

if [[ "$SKIP_NGINX_RELOAD" != "1" ]]; then
  if command -v systemctl >/dev/null 2>&1; then
    log "Reloading nginx via systemctl"
    systemctl reload nginx
  else
    log "systemctl not available; using nginx -s reload"
    nginx -s reload
  fi
else
  log "Skipping nginx reload because SKIP_NGINX_RELOAD=$SKIP_NGINX_RELOAD"
fi

log "Gateway bridge ready – ${GATEWAY_PREFIX}/* now forwards to $SERVICE_URL"
